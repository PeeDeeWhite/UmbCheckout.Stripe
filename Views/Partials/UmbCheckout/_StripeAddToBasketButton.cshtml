@using System.Globalization
@using UmbCheckout.Core.Interfaces
@using UmbCheckout.Shared
@using UmbCheckout.Shared.Extensions
@using UmbCheckout.Stripe.Controllers.Surface
@using Umbraco.Extensions
@model UmbCheckout.Stripe.ViewModels.StripeAddToBasketButtonViewModel
@inject IConfigurationService ConfigurationService
@{
    var configuration = await ConfigurationService.GetConfiguration();
    var fallbackCurrencyCode = !string.IsNullOrEmpty(configuration?.CurrencyCode) ? configuration.CurrencyCode : CultureInfo.CurrentUICulture.GetISOCurrencySymbol();

    var currencyCode = !string.IsNullOrEmpty(Model.CurrencyCode) ? Model.CurrencyCode : fallbackCurrencyCode;
}
@if (Model.Product != null)
{
    using (Html.BeginUmbracoForm<StripeBasketController>(nameof(StripeBasketController.Add), FormMethod.Post))
    {
        @if (Model.ShowQuantity)
        {
            <div class="@Model.FormGroupSpacerClass">
                @if (!string.IsNullOrEmpty(Model.QuantityLabel))
                {
                    <label for="quantity" class="@Model.LabelCssClass">@(Model.QuantityLabel):</label>
                }
                <input id="quantity" class="@Model.InputCssClass" type="number" name="quantity" value="1" min="1"/>
            </div>
        }
                        
        if (Model.Product.Children != null && Model.Product.Children.Any())
        {
            <div class="@Model.FormGroupSpacerClass">
                @if (!string.IsNullOrEmpty(Model.VariantSelectLabel))
                {
                    <label for="quantity" class="@Model.LabelCssClass">@(Model.VariantSelectLabel):</label>
                }
                <select name="key" class="@Model.SelectCssClass" style="height: 100%;">
                    <option value="@Model.Product.Key">@(!string.IsNullOrEmpty(Model.ProductNameAlias) ? Model.Product.Value<string>(Model.ProductNameAlias) : Model.Product.Name)</option>
                    @foreach (var variant in Model.Product.Children)
                    {
                        <!option value="@variant.Key">@(!string.IsNullOrEmpty(Model.ProductNameAlias) ? variant.Value<string>(Model.ProductNameAlias) : variant.Name) - @(Model.Product.Value<decimal>(Consts.PropertyAlias.PriceAlias).ToString("C"))</!option>
                    }
                </select>
            </div>
        }
        else
        {
            <input type="hidden" name="key" value="@Model.Product.Key" />
        }

        <input type="hidden" name="currencyCode" value="@currencyCode" />

        if (Model.ReturnGuid.HasValue)
        {
            <input type="hidden" name="redirectGuid" value="@Model.ReturnGuid.Value" />
        }

        <button class="@Model.ButtonCssClass" type="submit">@Model.ButtonText</button>
    }
}